#!/usr/bin/env bash
# Author: EarthlySkies <earthlyskies@protonmail.ch>
# A small launcher for Kura5
# Tries to determine if Vulkan can be used
# Provides extended logging

VERSION="1.2.1"
USERDIR=~/.config/unity3d/Kura5/Kura5BOTU
GAMELOG="$USERDIR/Player.log"
LAUNCHLOG="$USERDIR/Launcher.log"
STDOUTLOG="$USERDIR/Stdout.log"

# Text formatting
BOLD=$(tput bold)
NORM=$(tput sgr0)

# Doing this globally since Bash can't do return values
if [ -L "${BASH_SOURCE[0]}" ]; then
    LAUNCHERPATH=$(readlink "${BASH_SOURCE[0]}")
    LAUNCHERPATH=$(realpath "$LAUNCHERPATH")
else
    LAUNCHERPATH=$(realpath "${BASH_SOURCE[0]}")
fi
LAUNCHERDIR="$(dirname $LAUNCHERPATH)"



# Easy logging access
write-to-log () { echo "kura5-launcher[$$] at $(date +%R:%S.%N) -$1-: $2" >> "$LAUNCHLOG"; }
loginfo () { write-to-log "INFO" "$1"; }
logwarn () { write-to-log "WARN" "$1"; }
logemptyline () { echo "" >> "$LAUNCHLOG"; }

# Takes the total script input as a parameter
catch-uninstall-flag () {
    if [[ "$1" == *"-uninstall"* ]]; then
        "$LAUNCHERDIR"/uninstall
        exit "$?"
    fi
}


catch-root-user () {
    # https://bugzilla.gnome.org//show_bug.cgi?id=772875#c5
    if [ $(id -u) == "0" ]; then
        echo "Avoid running the game as root"
        echo "kura5: cannot launch a graphical application as root: operation not permitted"
        exit 0
    fi
}

# Takes the total script input as a parameter
catch-launcher-bypass () {
    if [[ "$@" == *"-nolauncher"* ]]; then
        ./Kura5.x86_64 -single-instance "$@"
        exit "$?"
    fi
}

first-things-first () {
    # This needs to be created before AppArmor confinment
    if [ ! -d "$USERDIR" ]; then
        mkdir -p "$USERDIR"
        loginfo "Created directory $USERDIR"
    fi
    
    # Hanging old logs might mess up this session
    rm -f "$GAMELOG"
    rm -f "$LAUNCHLOG"
    rm -f "$STDOUTLOG"
}

print-launcher-banner () {
    echo "Kura5: Bonds of the Undying"
    echo "Made by ChickenHat and the Kura5 Team"
    loginfo "Kura5 Linux Launcher by EarthlySkies"
    loginfo "Launcher version: $VERSION"
}

check-if-running-installed () {
    loginfo "Trying to determine if the game has been installed..."
    loginfo "Running directory detected as '$1'"
    
    if [[ "$1" == "/opt/kura5" ]] || [[ "$1" == *"/.local/share/Kura5"* ]]; then
        loginfo "Game located within a standard installation directory"
        loginfo "Most likely currently running an installed instance"
    else
        loginfo "Game not located within any standard installation path"
        loginfo "Most likely currently running in portable mode"
    fi
}

find-path-and-main-executable () {
    if [ ! -f "$LAUNCHERDIR"/Kura5.x86_64 ]; then
        echo ""
        echo "Could not find the Kura5.x86_64 executable. Cannot procceed without it"
        echo "Make sure that the launcher is located in the same directory as the game itself"
        exit 3
    fi
    
    check-if-running-installed "$LAUNCHERDIR"
}

# Takes the total script input as a parameter
log-cmdline-flags () {
    loginfo "Checking if cmdline flags have been used..."
    
    if [ "$#" != "0" ]; then
        logwarn "Manual cmdline flags have been detected"
        logwarn "The launcher was invoked with the following options: '$*'"
        
        if [[ "$@" == *"-force-wayland"* ]]; then
            logwarn "Wayland mode activated via cmdflags despite lack of proper support!"
            loginfo "This will most likely prevent the game from working at all"
        fi
        
    else
        loginfo "No flags were passed to the launcher"
    fi
}

check-user-preload-libraries () {
    loginfo "Checking for user-set preload libraries..."
    
    if [ "$LD_PRELOAD" != "" ]; then
        logwarn "User-specific custom libraries have been preloaded"
        loginfo "They allow overriding of Kura5's/Unity's own libraries and functionalities"
        loginfo "This can lead to reduced performance, instability and spurious crashes"
        logwarn "The following libraries were preloaded manually: '$LD_PRELOAD'"
    else
        loginfo "No custom libraries were manually set to be loaded"
    fi
}

log-global-library-preload-warning () {
    loginfo "The system has global preload libraries in use by default"
    loginfo "However, unless custom libraries have been enabled globally, issues are unlikely"
    loginfo "Most global libraries are auto-enabled by packages and are unobtrusive by design"
}

check-global-preload-libraries () {
loginfo "Checking if the system preloads libraries globally..."
    if [ -f /etc/ld.so.preload ]; then
        PRELOADFILE=$(cat /etc/ld.so.preload)
    fi
    
    if [ "$PRELOADFILE" != "" ]; then
        log-global-library-preload-warning
    else
    
        if [ -d /etc/ld.so.conf.d ]; then
            PRELOADCONTENTS=$(ls -A /etc/ld.so.conf.d)
            
            if [ "$PRELOADCONTENTS" != "" ]; then
                log-global-library-preload-warning
            fi
            
        else
            loginfo "Did not find any global libraries set to preload"
        fi
               
    fi
}

scrub-username-from-logs () {
    if [ "$USER" == "" ]; then
        USER=$(whoami)
    fi
    loginfo "Scrubbing username from the logs..."
    sed --sandbox -i "s/$USER/[username]/g" "$LAUNCHLOG"
    loginfo "Scrub complete"
}

calculate-checksums () {
    loginfo "Calculating the launcher's SHA512 checksum..."
    loginfo "$(sha512sum ${BASH_SOURCE[0]})"
    loginfo "Calculating the SHA512 checksum of Kura5.x86_64..."
    loginfo "$(sha512sum $LAUNCHERDIR/Kura5.x86_64)"
}

# Takes one integer as a parameter
# Exits after execution
log-cleanup () {
    logemptyline
    [ -f "$STDOUTLOG" ] && cat "$STDOUTLOG" >> "$LAUNCHLOG"
    logemptyline
    [ -f "$GAMELOG" ] && cat "$GAMELOG" >> "$LAUNCHLOG"
    logemptyline
    
    if [ "$1" == "0" ]; then
        loginfo "Game exited cleanly"
    else
        logwarn "Game did not exit cleanly"
        logwarn "Game exit status code: '$1'"
    fi
    
    loginfo "Log merge complete"
    calculate-checksums
    scrub-username-from-logs
    loginfo "Cleaning up..."
    mv "$LAUNCHLOG" "$GAMELOG"
    rm "$STDOUTLOG"
    exit "$1"
}

# Takes the total script input as a parameter
start-the-game () {
    if [[ "$@" == *"-nolog"* ]]; then
        rm "$LAUNCHLOG" 
        "$LAUNCHERDIR"/Kura5.x86_64 -single-instance -nolog "$@"
        exit "$?"
    else
        echo "Logging to $GAMELOG"
        loginfo "Launching the game..."
        "$LAUNCHERDIR"/Kura5.x86_64 -single-instance "$@" >> "$STDOUTLOG" 2>&1
        log-cleanup "$?"
    fi
}

# Takes the total script input and $VULKANUSABILITY as parameters
check-for-forced-renderer () {
    if [[ "$@" == *"-force-opengl"* ]] || [[ "$@" == *"-force-vulkan"* ]]; then
        loginfo "Specific renderer requested via cmdline flags"
        loginfo "Skipping automatic renderer selection"
        
        if [[ "$@" == *"-force-vulkan"* ]] && [[ "$@" == *"unusable"* ]]; then
            logwarn "Vulkan rendering requested despite lack of support!"
            loginfo "This will most likely cause the game to crash as soon as it starts"
            loginfo "Enabling Vulkan rendering at user's request"
            start-the-game "$@" "-force-vulkan"
        fi
        
        if [[ "$@" == *"-force-vulkan"* ]]; then
            loginfo "Enabling Vulkan rendering at user's request"
            start-the-game "$@" "-force-vulkan"
        else
            loginfo "Enabling OpenGL rendering at user's request"
            start-the-game "$@" "-force-opengl"
        fi
    fi
}

# Takes the total script input as a parameter
check-vulkan-usability () {
    loginfo "Running tests if Vulkan can be used..."
    
    vulkaninfo \
      >> /dev/null 2>&1 \
      && VULKANUSABILITY="available" \
      || VULKANUSABILITY="unusable"
      
    if [ "$VULKANUSABILITY" == "available" ]; then
        loginfo "Vulkan tests succeeded. GPU and drivers support Vulkan rendering"
        check-for-forced-renderer "$@" "$VULKANUSABILITY"
        loginfo "Enabling Vulkan rendering"
        start-the-game "$@" "-force-vulkan"
    else
        logwarn "Vulkan tests failed. GPU and/or drivers do not support Vulkan rendering"
        check-for-forced-renderer "$@" "$VULKANUSABILITY"
        loginfo "Falling back to OpenGL rendering"
        start-the-game "$@"
    fi
}

# Takes the total script input as a parameter
start-pregame-checks () {
    loginfo "Checking the availability of Vulkan compatibility detection tools..."
    
    if [ -f /usr/bin/vulkaninfo ]; then
        loginfo "Found 'vulkaninfo' in /usr/bin"
        check-vulkan-usability "$@"
    else
        loginfo "Did not find 'vulkaninfo' in /usr/bin"
        logwarn "Cannot determine the system's Vulkan compatibility"
        loginfo "Skipping Vulkan usability tests due a lack of tools"
        loginfo "Installing the 'vulkan-tools' package might fix this issue"
        check-for-forced-renderer "$@"
        start-the-game "$@"
    fi
}

main () {
    catch-uninstall-flag "$@"
    catch-root-user
    first-things-first
    catch-launcher-bypass
    print-launcher-banner
    find-path-and-main-executable
    log-cmdline-flags "$@"
    check-user-preload-libraries
    check-global-preload-libraries
    start-pregame-checks "$@"
}

main "$@"
